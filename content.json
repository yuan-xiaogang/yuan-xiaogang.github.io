{"meta":{"title":"frank的博客","subtitle":null,"description":null,"author":"frank","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"重学前端-第2天","slug":"重学前端-第2天","date":"2019-07-11T08:36:39.000Z","updated":"2019-07-12T10:25:37.873Z","comments":true,"path":"2019/07/11/重学前端-第2天/","link":"","permalink":"http://yoursite.com/2019/07/11/重学前端-第2天/","excerpt":"css可以美化我们的网页；设置版面布局和样式 css样式表 引入css样式的3种方式 1、行内式 写在标签内部的;开发中偶尔使用 &lt;div style=&quot;color: pink; font-size: 14px;&quot;&gt;行内式&lt;/div&gt; 2、内部样式表 123456789101112&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; color: pink; &#125; &lt;/style&gt;&lt;/head&gt; 3、外部样式表 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt; rel 定义引入文件类型 必须写","text":"css可以美化我们的网页；设置版面布局和样式 css样式表 引入css样式的3种方式 1、行内式 写在标签内部的;开发中偶尔使用 &lt;div style=&quot;color: pink; font-size: 14px;&quot;&gt;行内式&lt;/div&gt; 2、内部样式表 123456789101112&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; color: pink; &#125; &lt;/style&gt;&lt;/head&gt; 3、外部样式表 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt; rel 定义引入文件类型 必须写 选择器作用： 选择标签 基础选择器 标签选择器 设置同类标签样式 类选择器 标签内添加class=”” ，用于差异化选择；多类名使用空格隔开命名规范： 不要纯数字或者中文，尽量使用英文；多个单词之间可以使用中横线隔开 id选择器， 元素的id是唯一的； 通配符选择器 * 尽量少用此选择器 复合选择器 后代选择器 更加准确地选择标签 123.out div &#123; color: pink; &#125; 子元素选择器 123.out &gt; div &#123; color: pink; &#125; 交集选择器 123p.out &#123; color: pink; &#125; 并集选择器 123p, .out &#123; color: pink; &#125; 伪类选择器a:link 未访问的链接a:visited 访问过的链接a:hover 悬浮时a:active 激活时，鼠标未放开时状态顺序记忆： lv ha font字体 font-size: 字号大小 font-family: 字体 ；多个字体以逗号隔开；中文字体尽量加引号 font-weight: 字体粗细 默认是normal，bold加粗，bolder，lighter细体；100-900也可以表示粗细程度，400=normal，700=bold font-style: 字体风格（倾斜） normal, italic 倾斜 综合写法：font: italic 700 20px &#39;微软雅黑&#39;; font: font-style font-weight font-size font-family;一定不能省略font-size和font-family，顺序不能更改 css外观属性color：文本颜色 预定颜色值、16进制颜色值、rgb代码line-height：行间距 一般比字号大7、8像素 一行文字由4条线组成： 顶线，中线，基线，底线；基线与基线之间的距离称为行高； 行高 = 上距离+文字+下距离 行高=高度 垂直居中； 行高&gt;高度 文字偏下； 行高&lt;高度 文字偏上text-align：文本水平对齐方式 center left righttext-indent：首行缩进，一般使用2emtext-decoration： 文本装饰 none 、underline（文本下的线） 、overline（上划线）、 line-through（贯穿线） 标签的显示模式1、行内元素 display: inline; 常见的行内元素： a span b strong i em del s ins u； 注意点：高宽设置无效；span内最好不要放div；a标签内最好不放a标签；2、行内块元素 display: inline-block; 常见的行内块元素： img td input； 注意点：行内块元素之间会有一个间距；3、块级元素 display: block; 常见的块级元素： h1-h6 div ul ol li p； 注意点： p里面最好不要放置div； css背景 background-color 背景颜色 默认颜色 transparent background-image 背景图片 background-repeat 图片平铺 no-repeat repeat-x repeat-y ； 默认repeat background-position 背景位置 （x轴坐标， y轴坐标） 参数：length 或者 position","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"重学前端 第1天","slug":"重学前端-第1天","date":"2019-07-05T01:40:33.000Z","updated":"2019-07-11T08:35:21.346Z","comments":true,"path":"2019/07/05/重学前端-第1天/","link":"","permalink":"http://yoursite.com/2019/07/05/重学前端-第1天/","excerpt":"常见的浏览器 浏览器 内核 备注 ie trident edge Gecko google blink（webkit的分支） safari webkit opera blink 移动端的内核大部分使用的是webkit内核； web标准结构(html)、表现(css)、行为(js)","text":"常见的浏览器 浏览器 内核 备注 ie trident edge Gecko google blink（webkit的分支） safari webkit opera blink 移动端的内核大部分使用的是webkit内核； web标准结构(html)、表现(css)、行为(js) html标签1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 字符集gb2312 简体中文big5 繁体字gbk 包含简体中文和繁体UTF-8 包含所有 1&lt;meta charset=&quot;UTF-8&quot;&gt; 常用标签标签的语义化： 就是在合适的地方放上合适的标签； 标题标签 h1-h6 段落标签 p 水平线标签 &lt;hr /&gt; 换行标签 &lt;br /&gt; div、span 是无语义的，用于布局 注释标签 &lt;!--注释 --&gt; 文本格式化标签 b strong 都是加粗、strong具备语义 i em 倾斜 em更具语义 s del 删除线 del更具语义 u ins 下划线 ins更具语义 图像标签 img属性 src 图像路径 alt 替换文本 title 鼠标悬浮显示文本，提示文本 width 宽度 height 高度 border 边框， 几乎不用，使用css的border 链接标签 a属性 href 路径 target 打开方式，默认self；self 默认打开自身； _blank 打开新页面 锚点定位快速定位到页面某个位置；1、在某个位置创建id；2、&lt;a href=&quot;#id&quot;&gt;点击位置&lt;/a&gt; base标签包含在head标签内；定义全体链接的打开方式 1&lt;base target=&quot;_blank&quot; /&gt; 预格式化标签 pre认识空格和换行符 路径 相对路径 同级路径可以直接写文件名；从代码所在的文件出发 绝对路径 全路径（不提倡使用） 特殊字符&amp;nbsp; 空格&amp;lt; 小于号&amp;gt; 大于号更多的特殊符号，需要查询资料 表格表格是用来展示数据的；基本结构展示： 12345&lt;table&gt; &lt;tr&gt; &lt;td&gt;周一&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格属性 border 边框 单位像素 width 宽度 height 高度 align 设置表格在页面的水平对齐方式 left right center cellspacing 单元格之间的距离 cellpadding 单元格内容与边框的距离 th 表头单元格 居中加粗显示出来caption 表格标题 标签内部可以包含其他标签 合并单元格跨列合并 colspan （同一行合并多个列）跨行合并 rowspan （同一列合并多行） 复杂结构 1234567891011121314151617&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;周一&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;周一&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;周一&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt; 列表 无序列表 ul liul里只能包含li 123&lt;ul&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 有序列表 ol li 123&lt;ol&gt; &lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 自定义列表 12345&lt;dl&gt; &lt;dt&gt;北京&lt;/dt&gt; &lt;dd&gt;昌平区&lt;/dd&gt; &lt;dd&gt;东城区&lt;/dd&gt;&lt;/dl&gt; 表单input控件&lt;input type=&quot;text&quot; /&gt;type 属性 text 文本输入框 password 密码框 radio 单选按钮 checkbox 多选按钮 button 普通按钮 submit 提交按钮 reset 重置按钮 image 图片提交按钮 必须包含src属性 file 文本域 value 值 显示表单的值 name 属性 区别表单控件 checked 属性 表示默认选中状态 label标签1、直接包含表单 1234&lt;label&gt; 用户名 &lt;input type=&quot;text&quot; /&gt;&lt;/label&gt; 2、使用for=”id”来控制光标 文本域 textareacols、rows属性，不过实际开发中不使用，使用css来控制 下拉列表一般不会再开发中使用；由于在各个浏览器中表现的形式不同，很难修改其样式，会使用其他元素去模拟下拉列表 1234&lt;select&gt; &lt;option&gt;1&lt;/option&gt; &lt;option&gt;2&lt;/option&gt;&lt;/select&gt; 表单域 form action 属性 提交后端的url地址； method 方式， get/post name 区别不同的表单域","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]},{"title":"vue-cli3配置","slug":"vue-cli3配置","date":"2019-07-04T09:35:56.000Z","updated":"2019-07-04T09:36:29.151Z","comments":true,"path":"2019/07/04/vue-cli3配置/","link":"","permalink":"http://yoursite.com/2019/07/04/vue-cli3配置/","excerpt":"","text":"##","categories":[],"tags":[]},{"title":"gulp 搭建自己的工作流","slug":"gulp","date":"2019-07-04T03:23:38.000Z","updated":"2019-07-04T06:26:02.969Z","comments":true,"path":"2019/07/04/gulp/","link":"","permalink":"http://yoursite.com/2019/07/04/gulp/","excerpt":"准备工作1npm i gulp -g 新建项目文件，在根目录下创建gulpfile.js文件 提前定义了几个变量，方面更改文件路径 12const proSrc = &apos;src&apos;; // 项目文件夹const outSrc = &apos;dist&apos; // 输出code","text":"准备工作1npm i gulp -g 新建项目文件，在根目录下创建gulpfile.js文件 提前定义了几个变量，方面更改文件路径 12const proSrc = &apos;src&apos;; // 项目文件夹const outSrc = &apos;dist&apos; // 输出code 处理html暂时想到的： 对html进行压缩处理，其中htmlIsCompress 是控制是否压缩html的变量 12345678// 处理htmlgulp.task(&apos;html&apos;, function () &#123; return gulp.src(`$&#123;proSrc&#125;/**/*.html`) .pipe(gulpif(htmlIsCompress, htmlmin(&#123; collapseWhitespace: true &#125;))) .pipe(gulp.dest(outSrc))&#125;) 处理css 对css进行压缩处理, 使用cssIsCompress来控制 使用autoprefixer来添加前缀 使用postcss、postcss-px-to-viewport来做自适应 1234567891011121314151617181920212223const vwProcessors = [ pxtoviewport(&#123; viewportWidth: 1920, unitPrecision: 5, viewportUnit: &apos;vw&apos;, selectorBlackList: [], // 需要忽略的选择器 // exclude: [/reset.css/], // 需要排除的文件 minPixelValue: 1, mediaQuery: false &#125;)];// 处理cssgulp.task(&apos;css&apos;, function () &#123; return gulp.src(`$&#123;proSrc&#125;/css/*.css`) .pipe(postcss([autoprefixer()])) .pipe(postcss(vwProcessors)) .pipe(gulpif(cssIsCompress, cssmin(&#123; &quot;maxLineLen&quot;: 80, &quot;uglyComments&quot;: true &#125;))) .pipe(gulp.dest(`$&#123;outSrc&#125;/css`))&#125;) 处理js暂时只是做到了是否对js进行压缩 123456// 处理jsgulp.task(&apos;js&apos;, function () &#123; return gulp.src(`$&#123;proSrc&#125;/js/*.js`) .pipe(gulpif(jsIsCompress, uglify())) .pipe(gulp.dest(`$&#123;outSrc&#125;/js`))&#125;) 处理图片 imgIsCompress控制图片是否压缩 1234567// 处理图片gulp.task(&apos;images&apos;, function () &#123; return gulp.src(`$&#123;proSrc&#125;/images/*.&#123;png,jpeg,jpg,svg&#125;`) .pipe(gulpif(imgIsCompress, imagemin())) .pipe(gulp.dest(`$&#123;outSrc&#125;/images`))&#125;) 最后配置默认任务1234567// 清除dist文件gulp.task(&apos;deleteAll&apos;, function () &#123; return del(outSrc)&#125;)// defaultgulp.task(&apos;default&apos;, gulp.series(&apos;deleteAll&apos;, gulp.parallel(&apos;html&apos;, &apos;css&apos;, &apos;images&apos;, &apos;js&apos;))) 最后项目代码：https://github.com/yuan-xiaogang/gulp-work","categories":[],"tags":[]},{"title":"初使用hexo","slug":"hello-world","date":"2019-07-03T06:06:55.236Z","updated":"2019-07-04T06:16:33.600Z","comments":true,"path":"2019/07/03/hello-world/","link":"","permalink":"http://yoursite.com/2019/07/03/hello-world/","excerpt":"Create a new post创建新的文章 1$ hexo new \"My New Post\" More info: Writing","text":"Create a new post创建新的文章 1$ hexo new \"My New Post\" More info: Writing Run server启动服务器 1$ hexo server More info: Server Generate static files打包 1$ hexo generate More info: Generating Deploy to remote sites发布 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}